#ifndef __MPU6050_LITE_H__
#define __MPU6050_LITE_H__

#include "ti_msp_dl_config.h"
#include <math.h>

#define MPU6050_ADDR 0x68
#define MPU6050_SMPLRT_DIV   0x19
#define MPU6050_CONFIG       0x1A
#define MPU6050_GYRO_CONFIG  0x1B
#define MPU6050_ACCEL_CONFIG 0x1C
#define MPU6050_ACCEL_XOUT_H 0x3B
#define MPU6050_TEMP_OUT_H   0x41
#define MPU6050_GYRO_XOUT_H  0x43
#define MPU6050_PWR_MGMT_1   0x6B
#define MPU6050_PWR_MGMT_2   0x6C
#define MPU6050_WHO_AM_I     0x75
#define MPU6050_INT_ENABLE   0x38
#define MPU6050_INT_PIN_CFG  0x37
#define MPU6050_INT_STATUS   0x3A

#define dt 0.001f
#define YAW_COMPENSATION_FACTOR 0.036f

typedef struct {
    int16_t AccelX;
    int16_t AccelY;
    int16_t AccelZ;
    int16_t GyroX;
    int16_t GyroY;
    int16_t GyroZ;
} MPU6050_Raw_t;

typedef struct {
    uint8_t accel_cfg_;
    uint8_t gyro_cfg_;
    float gyroX_offset_;
    float gyroY_offset_;
    float gyroZ_offset_;
    float yaw_;
    float pitch_;
    float roll_;
    I2C_Regs* I2C_PORT_;
} MPU6050_t;

void MPU6050_Init(MPU6050_t* mpu, I2C_Regs* I2C_PORT);
void MPU6050_Begin(MPU6050_t* mpu, uint8_t samplerate_div, uint8_t gyro_config, uint8_t accel_config, bool useint);
void MPU6050_ClrInt(MPU6050_t* mpu);
MPU6050_Raw_t MPU6050_GetRawData(MPU6050_t* mpu);
void MPU6050_RawConv(MPU6050_t* mpu, const MPU6050_Raw_t* raw, float* data);
int16_t MPU6050_GetTemp(MPU6050_t* mpu);
uint8_t MPU6050_GetID(MPU6050_t* mpu);
void MPU6050_Calibrate(MPU6050_t* mpu, uint16_t samples);
void MPU6050_UpdateEuler(MPU6050_t* mpu);
void MPU6050_UpdateYaw(MPU6050_t* mpu);
float MPU6050_GetPitch(MPU6050_t* mpu);
float MPU6050_GetRoll(MPU6050_t* mpu);
float MPU6050_GetYaw(MPU6050_t* mpu);

#endif
